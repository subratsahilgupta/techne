# -*- coding: utf-8 -*-
"""techne6_h5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hz-tyUPaTxiATxmQTvTusT4fw2Jfm6-c
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from keras.optimizers import Adam,RMSprop,SGD,Adamax,Adagrad,Adadelta,Nadam
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from keras.models import Sequential
from keras.layers import Dense

# Load the dataset
df = pd.read_csv('healthvitals.csv')

df

# Separate features and target variable
X = df.drop(columns=['Fitness Score'])
y = df['Fitness Score']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=28)

# # Preprocess categorical columns (like 'Gender') using one-hot encoding
# categorical_cols = ['Gender']
# ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), categorical_cols)], remainder='passthrough')
# X_train = ct.fit_transform(X_train)
# X_test = ct.transform(X_test)

# Normalize the data
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# # Build the Neural Network model
# model = keras.Sequential([
#     keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
#     keras.layers.Dense(32, activation='relu'),
#     keras.layers.Dense(1)  # Output layer with a single neuron for regression
# ])
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))


# Compile the model
optimizer = keras.optimizers.Nadam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='mse')

# Train the model
history = model.fit(X_train, y_train, epochs=180, batch_size=32, validation_split=0.2)

# Make predictions
y_pred = model.predict(X_test).flatten()

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f'Mean Squared Error: {mse}')
print(f'R-squared (R2) Score: {r2}')
print(f'Mean Absolute Error (MAE): {mae}')
print(f'Root Mean Squared Error (RMSE): {rmse}')

model.save('techne.h5')

import pandas as pd
from sklearn.preprocessing import OneHotEncoder, MinMaxScaler
from keras.models import load_model

import pandas as pd
from sklearn.preprocessing import OneHotEncoder, MinMaxScaler
from keras.models import load_model

def predict_fitness_score(input_data):
    # Load the pre-trained model
    model = load_model('techne_ANN.h5')

    # Load the dataset
    df = pd.read_csv('health_vitals_data.csv')

    # Separate features and target variable
    X = df.drop(columns=['Fitness Score'])
    y = df['Fitness Score']

    # Preprocess categorical columns (like 'Gender') using one-hot encoding
    categorical_cols = ['Gender']
    ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), categorical_cols)], remainder='passthrough')
    X = ct.fit_transform(X)

    # Normalize the data
    scaler = MinMaxScaler()
    X = scaler.fit_transform(X)

    # Preprocess the input data
    input_data = pd.DataFrame(input_data, columns=df.drop(columns=['Fitness Score']).columns)
    input_data = ct.transform(input_data)
    input_data = scaler.transform(input_data)

    # Make predictions using the trained model
    predictions = model.predict(input_data).flatten()
    return predictions





#  USER INPUT FUNCTION


class HealthParams:
    def __init__(self, value):
        self.value = value
        self.next = None

class HealthVitalsLinkedList:
    def __init__(self):
        self.head = None

    def prepend(self, value):
        new_node = HealthParams(value)
        new_node.next = self.head
        self.head = new_node

    def get_recent_fit_scores(self, n):
        recent_fit_scores = []
        current_node = self.head
        while current_node and n > 0:
            recent_fit_scores.append(current_node.value)
            current_node = current_node.next
            n -= 1
        return recent_fit_scores

def get_float_input(prompt):
    while True:
        try:
            value = float(input(prompt))
            return value
        except ValueError:
            print("Invalid input. Please enter a valid number.")

def get_user_input(heart_rate_list, sleep_duration_list, systolic_bp_list, diastolic_bp_list, stress_level_list):
    try:
        hr = get_float_input("Enter Heart Rate values: ")
        heart_rate_list.prepend(hr)

        sleep = get_float_input("Enter Sleep Duration values: ")
        sleep_duration_list.prepend(sleep)

        sys_bp = get_float_input("Enter Systolic Blood Pressure values: ")
        systolic_bp_list.prepend(sys_bp)

        dias_bp = get_float_input("Enter Diastolic Blood Pressure values: ")
        diastolic_bp_list.prepend(dias_bp)

        stress = get_float_input("Enter Stress Level values: ")
        stress_level_list.prepend(stress)

        # Return user input as a dictionary
        user_input = {
            'Heart Rate': hr,
            'Stress Level': stress,
            'Systolic': sys_bp,
            'Diastolic': dias_bp,
            'Sleep Duration': sleep,
        }
        return user_input
    except ValueError:
        print("Invalid input. Please enter a valid number.")

def main():
    # Create HealthVitalsLinkedList instances
    heart_rate_list = HealthVitalsLinkedList()
    sleep_duration_list = HealthVitalsLinkedList()
    systolic_bp_list = HealthVitalsLinkedList()
    diastolic_bp_list = HealthVitalsLinkedList()
    stress_level_list = HealthVitalsLinkedList()
    fitness_score_list = HealthVitalsLinkedList()

    # Get user input and store in respective linked lists
    user_input = get_user_input(heart_rate_list, sleep_duration_list, systolic_bp_list, diastolic_bp_list, stress_level_list)
    # prediction = predict_fitness_score([user_input])
    # print("Predicted Fitness Score:", prediction[0])

    # Display the linked lists for each health vital
    def display_linked_list(linked_list, health_vital_name):
        current = linked_list.head
        while current:
            print(f"{health_vital_name}: {current.value}")
            current = current.next
        print()

    display_linked_list(heart_rate_list, "Heart Rate")
    display_linked_list(sleep_duration_list, "Sleep Duration")
    display_linked_list(systolic_bp_list, "Systolic Blood Pressure")
    display_linked_list(diastolic_bp_list, "Diastolic Blood Pressure")
    display_linked_list(stress_level_list, "Stress Level")
    display_linked_list(fitness_score_list, "Fitness Score")

if __name__ == "__main__":
    main()



df =pd.read_csv('health_vitals_data.csv')

df

# Perform one-hot encoding for categorical features (if applicable)
df_encoded = pd.get_dummies(df, columns=['Gender'], drop_first=True)

df_encoded.to_csv("healthvitals.csv", index=False)

df1 =pd.read_csv('healthvitals.csv')

df1

df1.describe()









