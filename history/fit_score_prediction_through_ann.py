# -*- coding: utf-8 -*-
"""Fit_score_prediction_through_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1igTQTWo_KT0_XwsinId9c7oKdxBfB4si
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from keras.models import Sequential
from keras.layers import Dense

# Load the dataset
df = pd.read_csv('health_vitals_data.csv')

# Separate features and target variable
X = df.drop(columns=['Fitness Score'])
y = df['Fitness Score']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=28)

# Preprocess categorical columns (like 'Gender') using one-hot encoding
categorical_cols = ['Gender']
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), categorical_cols)], remainder='passthrough')
X_train = ct.fit_transform(X_train)
X_test = ct.transform(X_test)

# Normalize the data
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build the Neural Network model
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

# Compile the model
model.compile(optimizer='nadam', loss='mse')

# Train the model
model.fit(X_train, y_train, epochs=180, batch_size=32, validation_split=0.2)

# Helper function to normalize stress level
def normalize_stress_level(stress_level):
    stress_mapping = {'Low': 0.0, 'Medium': 0.5, 'High': 1.0}
    return stress_mapping.get(stress_level, 0.0)

# ... (other normalization functions for other health vitals)

def preprocess_input_data(new_health_vitals):
    new_health_vitals_copy = new_health_vitals.copy()
    new_health_vitals_copy['Stress Level'] = new_health_vitals_copy['Stress Level'].apply(normalize_stress_level)
    new_health_vitals_normalized = ct.transform(new_health_vitals_copy)
    new_health_vitals_normalized = scaler.transform(new_health_vitals_normalized)
    return new_health_vitals_normalized

def predict_fitness_score(model, new_health_vitals):
    new_health_vitals_normalized = preprocess_input_data(new_health_vitals)
    predicted_fitness_scores = model.predict(new_health_vitals_normalized).flatten()
    return predicted_fitness_scores

def get_user_input():
    health_vitals_data = {}
    thresholds = {
        'Age': (0, 100),
        'Sleep Duration': (1, 12),
        'Heart Rate': (50, 100),
        'Daily Steps': (0, 10000),
        'Systolic': (80, 200),
        'Diastolic': (50, 120)
    }

    for col in X.columns:
        if col == 'Gender':
            val = input(f"Enter Gender ('Male' or 'Female'): ")
            while val.lower() not in ['male', 'female']:
                print("Invalid input. Please enter 'Male' or 'Female'.")
                val = input(f"Enter Gender ('Male' or 'Female'): ")
            health_vitals_data[col] = [val]
        elif col == 'Stress Level':
            val = input(f"Enter Stress Level ('Low', 'Medium', 'High'): ")
            while val.lower() not in ['low', 'medium', 'high']:
                print("Invalid input. Please enter 'Low', 'Medium', or 'High'.")
                val = input(f"Enter Stress Level ('Low', 'Medium', 'High'): ")
            health_vitals_data[col] = [val]
        else:
            low, high = thresholds[col]
            val = float(input(f"Enter {col} (between {low} and {high}): "))
            while val < low or val > high:
                print(f"Invalid input. Please enter a value between {low} and {high}.")
                val = float(input(f"Enter {col} (between {low} and {high}): "))
            health_vitals_data[col] = [val]
    return pd.DataFrame(health_vitals_data)

class HealthParams:
    def __init__(self, value):
        self.value = value
        self.next = None

class HealthVitalsLinkedList:
    def __init__(self):
        self.head = None

    def append(self, value):
        new_node = HealthParams(value)
        if self.head is None:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node

    def prepend(self, value):
        new_node = HealthParams(value)
        new_node.next = self.head
        self.head = new_node

    def display_linked_list(self):
        current_node = self.head
        while current_node:
            print(current_node.value, end=" -> ")
            current_node = current_node.next
        print("None")

def main():
    heart_rate_list = HealthVitalsLinkedList()
    sleep_duration_list = HealthVitalsLinkedList()
    systolic_bp_list = HealthVitalsLinkedList()
    diastolic_bp_list = HealthVitalsLinkedList()
    stress_level_list = HealthVitalsLinkedList()
    fitness_score_list = HealthVitalsLinkedList()

    while True:
        # Get user input for new health vitals
        new_health_vitals_df = get_user_input()

        # Call the predict_fitness_score function with the loaded model and new health vitals data
        predictions = predict_fitness_score(model, new_health_vitals_df)

        predicted_fitness_score = predictions[0]
        fitness_score_list.prepend(predicted_fitness_score)

        # Check whether the predicted fitness score is good or bad
        if predicted_fitness_score >= 70.5:
            fitness_condition = "Good"
        else:
            fitness_condition = "Bad"

        print(f"\nPredicted Fitness Score: {predicted_fitness_score:.2f} ({fitness_condition})")

        # Define threshold values for each vital
        threshold_values = {
            'Sleep Duration': (1, 12),
            'Heart Rate': (80, 100),
            'Daily Steps': (5000, 10000),
            'Systolic': (95, 250),
            'Diastolic': (80, 200)
        }

        # Check whether the health vitals are in good or bad condition
        for col, (low, high) in threshold_values.items():
            value = new_health_vitals_df[col].iloc[0]
            if low <= value <= high:
                status = "Good"
            else:
                status = "Bad"
            print(f"{col}: {value} ({status})")

        for index, row in new_health_vitals_df.iterrows():
            heart_rate_list.prepend(row['Heart Rate'])
            sleep_duration_list.prepend(row['Sleep Duration'])
            systolic_bp_list.prepend(row['Systolic'])
            diastolic_bp_list.prepend(row['Diastolic'])
            stress_level_list.prepend(row['Stress Level'])

        print("\nHealth Vitals Linked Lists:")
        print("Heart Rate Linked List:")
        heart_rate_list.display_linked_list()

        print("Sleep Duration Linked List:")
        sleep_duration_list.display_linked_list()

        print("Systolic Blood Pressure Linked List:")
        systolic_bp_list.display_linked_list()

        print("Diastolic Blood Pressure Linked List:")
        diastolic_bp_list.display_linked_list()

        print("Stress Level Linked List:")
        stress_level_list.display_linked_list()

        print("Fitness Score Linked List:")
        fitness_score_list.display_linked_list()

        continue_prediction = input("Do you want to continue predicting? (y/n): ")
        if continue_prediction.lower() != 'y':
            break

if __name__ == "__main__":
    main()