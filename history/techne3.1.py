# -*- coding: utf-8 -*-
"""Storage_and_health_vital_factors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19I5Jr3AoWjSJJOuVItUUkPoL57Xct4pn
"""

class HealthParams:
    def __init__(self, value):
        self.value = value
        self.next = None

class IdealFitnessScoreParams:
    def __init__(self, value):
        self.value = value
        self.next = None

class HealthVitalsLinkedList:
    def __init__(self):
        self.head = None

    def append(self, value):
        new_node = HealthParams(value)
        if self.head is None:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node

    def prepend(self, value):
        new_node = HealthParams(value)
        new_node.next = self.head
        self.head = new_node

    def display_linked_list(self):
        current_node = self.head
        while current_node:
            print(current_node.value, end=" -> ")
            current_node = current_node.next
        print("None")

class IdealFitnessScoreLinkedList:
    def __init__(self):
        self.head = None

    def prepend(self, value):
        new_node = IdealFitnessScoreParams(value)
        new_node.next = self.head
        self.head = new_node

    def display_linked_list(self):
        current_node = self.head
        while current_node:
            print(current_node.value, end=" -> ")
            current_node = current_node.next
        print("None")

def get_valid_float_input(prompt, min_value=float('-inf'), max_value=float('inf')):
    while True:
        try:
            value = float(input(prompt))
            if value < min_value or value > max_value:
                raise ValueError
            return value
        except ValueError:
            print("Invalid input. Please enter a valid number within the allowed range.")

# Health Vitals Normalization and Ideal Fitness Score Calculation
def normalize_heart_rate(heart_rate):
    # Normalize heart rate to a scale between 0 and 1
    min_heart_rate = 50  # Minimum healthy heart rate
    max_heart_rate = 100  # Maximum healthy heart rate
    normalized_heart_rate = (heart_rate - min_heart_rate) / (max_heart_rate - min_heart_rate)
    return normalized_heart_rate

def normalize_blood_pressure(blood_pressure):
    # Normalize blood pressure to a scale between 0 and 1
    min_blood_pressure = 60  # Ideal diastolic blood pressure
    max_blood_pressure = 120  # Ideal systolic blood pressure
    normalized_blood_pressure = (blood_pressure - min_blood_pressure) / (max_blood_pressure - min_blood_pressure)
    return normalized_blood_pressure

def normalize_sleep_duration(sleep_duration):
    # Normalize sleep duration to a scale between 0 and 1
    min_sleep_duration = 6  # Minimum recommended sleep duration for adults
    max_sleep_duration = 9  # Maximum recommended sleep duration for adults
    normalized_sleep_duration = (sleep_duration - min_sleep_duration) / (max_sleep_duration - min_sleep_duration)
    return normalized_sleep_duration

def normalize_stress_level(stress_level):
    # Assuming stress level is given as a string ('Low', 'Medium', 'High')
    # You can define a mapping function to convert it to a numeric value for normalization
    stress_mapping = {'Low': 0.0, 'Medium': 0.5, 'High': 1.0}
    return stress_mapping.get(stress_level, 0.0)

def calculate_ideal_fitness_score(heart_rate, systolic_bp, diastolic_bp, sleep_duration, stress_level):
    # Normalize the health vitals
    normalized_heart_rate = normalize_heart_rate(heart_rate)
    normalized_systolic_bp = normalize_blood_pressure(systolic_bp)
    normalized_diastolic_bp = normalize_blood_pressure(diastolic_bp)
    normalized_sleep_duration = normalize_sleep_duration(sleep_duration)
    normalized_stress_level = normalize_stress_level(stress_level)

    # Calculate the ideal fitness score using the formula
    ideal_fitness_score = (
        0.3 * normalized_heart_rate
        + 0.2 * normalized_systolic_bp
        + 0.2 * normalized_diastolic_bp
        + 0.1 * normalized_stress_level
        + 0.2 * normalized_sleep_duration
    )

    return ideal_fitness_score, {
        "Heart Rate": normalized_heart_rate,
        "Systolic Blood Pressure": normalized_systolic_bp,
        "Diastolic Blood Pressure": normalized_diastolic_bp,
        "Sleep Duration": normalized_sleep_duration,
        "Stress Level": normalized_stress_level,
    }

def main():
    heart_rate_list = HealthVitalsLinkedList()
    sleep_duration_list = HealthVitalsLinkedList()
    systolic_bp_list = HealthVitalsLinkedList()
    diastolic_bp_list = HealthVitalsLinkedList()
    stress_level_list = HealthVitalsLinkedList()
    ideal_fitness_score_list = IdealFitnessScoreLinkedList()

    while True:
        heart_rate = get_valid_float_input("Enter Heart Rate (bpm): ", 40, 200)
        sleep_duration = get_valid_float_input("Enter Sleep Duration (hours): ", 2, 12)
        systolic_bp = get_valid_float_input("Enter Systolic Blood Pressure (mmHg): ", 80, 200)
        diastolic_bp = get_valid_float_input("Enter Diastolic Blood Pressure (mmHg): ", 50, 120)
        stress_level = input("Enter Stress Level ('Low', 'Medium', 'High'): ")
        while stress_level not in ('Low', 'Medium', 'High'):
            print("Invalid input. Please enter 'Low', 'Medium', or 'High'.")
            stress_level = input("Enter Stress Level ('Low', 'Medium', 'High'): ")

        heart_rate_list.prepend(heart_rate)
        sleep_duration_list.prepend(sleep_duration)
        systolic_bp_list.prepend(systolic_bp)
        diastolic_bp_list.prepend(diastolic_bp)
        stress_level_list.prepend(stress_level)

        # Calculate and store the ideal fitness score for the current health vitals
        ideal_fitness_score, _ = calculate_ideal_fitness_score(heart_rate, systolic_bp, diastolic_bp, sleep_duration, stress_level)
        ideal_fitness_score_list.prepend(ideal_fitness_score)

        more_entries = input("Do you want to enter more health parameters? (y/n): ")
        if more_entries.lower() != 'y':
            break

    print("Heart Rate Linked List:")
    heart_rate_list.display_linked_list()

    print("Sleep Duration Linked List:")
    sleep_duration_list.display_linked_list()

    print("Systolic Blood Pressure Linked List:")
    systolic_bp_list.display_linked_list()

    print("Diastolic Blood Pressure Linked List:")
    diastolic_bp_list.display_linked_list()

    print("Stress Level Linked List:")
    stress_level_list.display_linked_list()

    print("Ideal Fitness Score Linked List:")
    ideal_fitness_score_list.display_linked_list()

    # Get the latest health vitals
    heart_rate = heart_rate_list.head.value
    sleep_duration = sleep_duration_list.head.value
    systolic_bp = systolic_bp_list.head.value
    diastolic_bp = diastolic_bp_list.head.value
    stress_level = stress_level_list.head.value

    # Calculate the latest ideal fitness score
    ideal_fitness_score, normalized_values = calculate_ideal_fitness_score(
        heart_rate, systolic_bp, diastolic_bp, sleep_duration, stress_level
    )
    ideal_fitness_score_percentage = ideal_fitness_score * 100

    print("\nIdeal Fitness Score: {:.2f}% ({})".format(ideal_fitness_score_percentage, "Good" if ideal_fitness_score_percentage >= 70 else "Bad"))

    # Display health vitals affecting the ideal fitness score
    print("\nHealth Vitals Affecting the Ideal Fitness Score:")
    for vital, value in normalized_values.items():
        status = "Good" if (0.7 * ideal_fitness_score) <= value else "Bad"
        print(f"{vital}: {value * 100:.2f}% ({status})")

if __name__ == "__main__":
    main()